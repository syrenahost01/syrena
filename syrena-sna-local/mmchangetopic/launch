#!/usr/bin/env bash
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


# Override this section from the script to include the com.sun.management.jmxremote.rmi.port property.
if [ -z "$KAFKA_JMX_OPTS" ]; then
  export KAFKA_JMX_OPTS="-Dcom.sun.management.jmxremote=true -Dcom.sun.management.jmxremote.authenticate=false  -Dcom.sun.management.jmxremote.ssl=false "
fi

# The JMX client needs to be able to connect to java.rmi.server.hostname.
# The default for bridged n/w is the bridged IP so you will only be able to connect from another docker container.
# For host n/w, this is the IP that the hostname on the host resolves to.

# If you have more that one n/w configured, hostname -i gives you all the IPs,
# the default is to pick the first IP (or network).
export KAFKA_JMX_HOSTNAME=${KAFKA_JMX_HOSTNAME:-$(hostname -i | cut -d" " -f1)}

if [ "$KAFKA_JMX_PORT" ]; then
  # This ensures that the "if" section for JMX_PORT in kafka launch script does not trigger.
  export JMX_PORT=$KAFKA_JMX_PORT
  export KAFKA_JMX_OPTS="$KAFKA_JMX_OPTS -Djava.rmi.server.hostname=$KAFKA_JMX_HOSTNAME -Dcom.sun.management.jmxremote.local.only=false -Dcom.sun.management.jmxremote.rmi.port=$JMX_PORT -Dcom.sun.management.jmxremote.port=$JMX_PORT"
fi

# required MirrorMaker configuration
MIRRORMAKER_OPTS="--new.consumer --abort.on.send.failure ${MIRRORMAKER_ABORT_ON_SEND_FAILURE:-true} --offset.commit.interval.ms ${MIRRORMAKER_OFFSET_COMMIT_INTERVAL:-60000} --num.streams ${MIRRORMAKER_NUM_STREAMS:-1} --whitelist '${MIRRORMAKER_WHITE_LIST}' --consumer.config /etc/${COMPONENT}/${COMPONENT}-consumer.properties --producer.config /etc/${COMPONENT}/${COMPONENT}-producer.properties"

## SYRENA mod: suppression espaces pour declaration variables d'environnement
# optional configuration
if [ "$MIRRORMAKER_CONSUMER_REBALANCE_LISTENER" ]; then
  CONSUMER_REBALANCE_OPTS="--consumer.rebalance.listener $MIRRORMAKER_CONSUMER_REBALANCE_LISTENER"

  if [ "$MIRRORMAKER_CONSUMER_REBALANCE_LISTENER_ARGS" ]; then
    CONSUMER_REBALANCE_OPTS="$CONSUMER_REBALANCE_OPTS --rebalance.listener.args $MIRRORMAKER_CONSUMER_REBALANCE_LISTENER_ARGS"
  fi
 fi

if [ "$MIRRORMAKER_MESSAGE_HANDLER" ]; then
  MESSAGE_HANDLER_OPTS="--message.handler $MIRRORMAKER_MESSAGE_HANDLER"

  if [ "$MIRRORMAKER_MESSAGE_HANDLER_ARGS" ]; then
    MESSAGE_HANDLER_OPTS="$MESSAGE_HANDLER_OPTS --message.handler.args $MIRRORMAKER_MESSAGE_HANDLER_ARGS"
  fi
fi

echo "===> Launching ${COMPONENT} ... "
echo "kafka-mirror-maker $MIRRORMAKER_OPTS $CONSUMER_REBALANCE_OPTS $MESSAGE_HANDLER_OPTS"
exec kafka-mirror-maker $MIRRORMAKER_OPTS $CONSUMER_REBALANCE_OPTS $MESSAGE_HANDLER_OPTS

# kafka-mirror-maker --new.consumer --abort.on.send.failure ${MIRRORMAKER_ABORT_ON_SEND_FAILURE:-true} --offset.commit.interval.ms ${MIRRORMAKER_OFFSET_COMMIT_INTERVAL:-60000} --num.streams ${MIRRORMAKER_NUM_STREAMS:-1} --whitelist $MIRRORMAKER_WHITE_LIST --consumer.config /etc/${COMPONENT}/${COMPONENT}-consumer.properties --producer.config /etc/${COMPONENT}/${COMPONENT}-producer.properties --message.handler $MIRRORMAKER_MESSAGE_HANDLER --message.handler.args $MIRRORMAKER_MESSAGE_HANDLER_ARGS
# kafka-mirror-maker --new.consumer --abort.on.send.failure true --offset.commit.interval.ms 60000 --num.streams 1 --whitelist 'syrena.*' --consumer.config /etc/kafka-mirrormaker/kafka-mirrormaker-consumer.properties --producer.config /etc/kafka-mirrormaker/kafka-mirrormaker-producer.properties  --message.handler com.opencore.RenameTopicHandler --message.handler.args 'syrenatablette,syrenalocal'
